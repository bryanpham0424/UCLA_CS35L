Bryan Pham   UID: 105 - 105 - 100

Homework:
1. First I looked up gpg in man to understand what it did and what are its functions. I wanted to see if there were any keys yet so I listed the keys with gpg. Because I never used gpg before, gpg created a .gnupg file directory.
Commands: [man gpg], [gpg --list-keys]
2. Next thing I did was create a key with gpg2 commands. I was asked what type of key (RSA to RSA), size (2048 bits), and time limit (Does not expire).
   Then I enetered my name, my email, and a comment for verification. I followed up with the find command to make sure I didn't exhaust the entropy pool.
   There was no error that occurred so I assume everything went smoothly as planned.
Commands: [gpg2 --gen-key], [find -readable > /dev/null]
3. Next I wanted to see whether or not my key was in the public keyring with the correct information. I listed the keys and my key was there with the correct name, email, and message.
Commands: [gpg --list-keys]
4. I exported my key to a file called hw-pubkey.asc is ASCII format. To ensure that it was in ASCII format, I added the argument [--armor] to the gpg command.
Commands: [gpg --armor --export --output hw-pubkey.asc]
5. I signed it and made it a detached signature. The first time I exectued the command, it had output to a file called hw-pubkey.asc.sig. I didn't know if renaming it would break it or cause some error so I just resigned it
   and it prompted me to overwrite it. I said no, then it asked me to rename it so I renamed it hw-pubkey.sig.
Commands: [gpg2 --detach-sign hw-pubkey.asc]
6. I verified my detached signature with the file. Once I verified them, it said "Good Signature".
Commands: [gpg2 --verify hw-pubkey.sig hw-pubkey.asc]

Homework Questions:

1. Suppose the other teams really had been observing all the bytes going across the network. 
Is your resulting network still secure? If so, explain why, and explain whether your answer 
would change if (1) you assumed the other teams had also tapped your keyboards after you completed 
all client-server setup and had thereby obtained your team's keystrokes during later operation, or 
(2) you are booting off USB and you assume the other teams temporarily had physical control of the USB. 
If not, explain any weaknesses of your team's setups, focusing on possible attacks by such outside observers.

Answer 1:
   I believe that the resulting network would still be secure. The reason being is that we have generated a private and public key pair, and the messages that are sent between my computer (on the linux servers) and the linux server itself
   are encrypted by the public keys. The can only be decrypted with my private key and vice versa with the receiver.

   (1) The passphrase is the weakest part of the encrypting and securing process. We simply type in a phrase, there is no algorithm or masking involved. Had someone tapped our keystrokes, then they possibly have the passphrase and can log in 
       as us. However, having the passphrase does not give access to the private key.
   (2) If they had the USB, then they probably would have the means to enter our file directories, specifically the .ssh file, and find the private key for themselves.

2. Explain why the gpg2 --verify command in the following instructions doesn't really verify that you personally 
created the file in question. How would you go about fixing this problem?

Answer 2:
   I believe it only checks if the file and the detached signature match. An attacker can potentially make a new detached signature that could match with another file.

   Maybe an additional third party to track the public key, such as a certificate system. It could track the original owner of the public key, and then check whether or not the person using the key matches the owner, that way unauthorized access can be tracked.


