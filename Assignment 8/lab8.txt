Bryan Pham
UID: 105-105-100
Assignment 8

Lab: Managing a backported change

1. Command: [git clone https://git.savannah.gnu.org/git/diffutils.git]
	Gets a copy of the Diffutils repository from the website.
2. Command: [cd diffutils] [git log master > ../git-log.txt]
	Outputs the logs of previous commits of the master branch to a .txt file.
3. Command: [git tag > ../git-tags.txt]
	Outputs a list of tags (branches that cannot be changed) to a .txt file.
4. Command: [emacs git-log.txt] [C-s 'like this']
	Open the logs and then search through the commits to find the one that matches 'like this'. Then I copied the commit id of that commit.
	ID of the commit was: 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f
5. Command: [git format-patch -1 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f --stdout > ../quote-patch.txt]
	Create a patch file from the commit.
6. Command: [git checkout v3.0]
	When I executed this command, a 'note' was outputted to standard out saying that I am in the 'detached HEAD' state.
7. Command: [patch -p1 < ../quote-patch.txt]
	Applies the patch. There were 3 files that were not found/were not able to be patched, I skipped them by pressing enter and [y].
8. Command: [git status]
	Gives an overview of what happened so far. This was the output of [git status]

# HEAD detached at v3.0
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#       modified:   NEWS
#       modified:   README
#       modified:   TODO
#       modified:   doc/diagmeet.note
#       modified:   ms/config.bat
#       modified:   ms/config.site
#       modified:   po/en.po
#       modified:   src/analyze.c
#       modified:   src/cmp.c
#       modified:   src/context.c
#       modified:   src/diff.c
#       modified:   src/diff.h
#       modified:   src/diff3.c
#       modified:   src/dir.c
#       modified:   src/ifdef.c
#       modified:   src/io.c
#       modified:   src/sdiff.c
#       modified:   src/side.c
#       modified:   src/system.h
#       modified:   src/util.c
#       modified:   tests/help-version
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#       NEWS.orig
#       README-hacking.orig
#       README-hacking.rej
#       README.orig
#       README.rej
#       cfg.mk.orig
#       cfg.mk.rej
#       ms/config.site.orig
#       src/cmp.c.orig
#       src/context.c.orig
#       src/diff.c.orig
#       src/diff.c.rej
#       src/diff.h.orig
#       src/diff3.c.orig
#       src/diff3.c.rej
#       src/dir.c.orig
#       src/sdiff.c.orig
#       src/system.h.orig
#       src/util.c.orig
#       tests/help-version.orig

9. Emacs commands and what they do:

vc-diff will compare the work files from the original VC fileset to the
original versions. For this specific case, it will display the differences
between the file before and after the patch was applied. It displays the 
diff in a new window (the *vc-diff* buffer).

vc-revert will revert the work files in the current VC fileset to the last 
revision (pre-patch).

diff-apply-hunk will apply a hunk to the target file. Preceded by C-u will 
revert the file by applying the reverse of the hunk. (A hunk is a "hunk" of 
changes applied by a patch - a contiguous chunk of diff lines.)

diff-goto-source will go to the source code of a diff hunk.

For all files that are not a .c file:
[emacs file_name] [C-x v u] [yes Enter]

For all .c files:
[emacs file_name], [C-x v =], and then for all hunks not involving
character string constants, [C-u C-c C-a]. [C-c C-c] can be used to
jump to the source code to confirm that the diff hunk does not apply to a 
constant c-string for any unclear cases. Only changes applied to comments 
are undone because they do not affect the functionality of the patch, and the 
client would prefer the most conservative change possible.

10. Command: [ls src/.*.c.rej]
	Command lists all files that end with the suffix .c.rej. The only two files found were: 'src/diff.c.rej' and 'src/diff3.c.rej'.

11. Command: [emacs src/diff.c.rej] [C-s `] and afterwards [emacs src/diff3.c.rej] [C-s `]
	Went into both c files and manually changes all instances of ` to ' in code that isn't a comment.

12. Command: [git clean -f] [git status]
	git clean -f will removed all of the untracked files. git status will show all of the modified files so far. As expected, there are a half dozen of 
	files displayed.

13. Command: [git diff > ../quote-3.0-patch.txt] [cat ../quote-3.0-patch.txt | wc -l]
	The first command gets all differences and outputs it into the quote-3.0-patch.txt, and the second command counts the lines within in txt.
	There were 390 lines, which is between 300 and 400 lines as expected.

14. Command: [./bootstrap] to get the other files from other source packages required
in building, then [./configure], [make], and [make check].

15. Command: [./src/diff . -]
	Output is "diff: cannot compare '-' to a directory"

16. Command: [./src/diff --help]
	Output:
Usage: ./src/diff [OPTION]... FILES
Compare files line by line.

  -i  --ignore-case  Ignore case differences in file contents.
  --ignore-file-name-case  Ignore case when comparing file names.
  --no-ignore-file-name-case  Consider case when comparing file names.
  -E  --ignore-tab-expansion  Ignore changes due to tab expansion.
  -b  --ignore-space-change  Ignore changes in the amount of white space.
  -w  --ignore-all-space  Ignore all white space.
  -B  --ignore-blank-lines  Ignore changes whose lines are all blank.
  -I RE  --ignore-matching-lines=RE  Ignore changes whose lines all match RE.
  --strip-trailing-cr  Strip trailing carriage return on input.
  -a  --text  Treat all files as text.

  -c  -C NUM  --context[=NUM]  Output NUM (default 3) lines of copied context.
  -u  -U NUM  --unified[=NUM]  Output NUM (default 3) lines of unified context.
    --label LABEL  Use LABEL instead of file name.
    -p  --show-c-function  Show which C function each change is in.
    -F RE  --show-function-line=RE  Show the most recent line matching RE.
  -q  --brief  Output only whether files differ.
  -e  --ed  Output an ed script.
  --normal  Output a normal diff.
  -n  --rcs  Output an RCS format diff.
  -y  --side-by-side  Output in two columns.
    -W NUM  --width=NUM  Output at most NUM (default 130) print columns.
    --left-column  Output only the left column of common lines.
    --suppress-common-lines  Do not output common lines.
  -D NAME  --ifdef=NAME  Output merged file to show '#ifdef NAME' diffs.
  --GTYPE-group-format=GFMT  Similar, but format GTYPE input groups with GFMT.
  --line-format=LFMT  Similar, but format all input lines with LFMT.
  --LTYPE-line-format=LFMT  Similar, but format LTYPE input lines with LFMT.
    LTYPE is 'old', 'new', or 'unchanged'.  GTYPE is LTYPE or 'changed'.
    GFMT may contain:
      %<  lines from FILE1
      %>  lines from FILE2
      %=  lines common to FILE1 and FILE2
      %[-][WIDTH][.[PREC]]{doxX}LETTER  printf-style spec for LETTER
        LETTERs are as follows for new group, lower case for old group:
          F  first line number
          L  last line number
          N  number of lines = L-F+1
          E  F-1
          M  L+1
    LFMT may contain:
      %L  contents of line
      %l  contents of line, excluding any trailing newline
      %[-][WIDTH][.[PREC]]{doxX}n  printf-style spec for input line number
    Either GFMT or LFMT may contain:
      %%  %
      %c'C'  the single character C
      %c'\OOO'  the character with octal code OOO

  -l  --paginate  Pass the output through 'pr' to paginate it.
  -t  --expand-tabs  Expand tabs to spaces in output.
  -T  --initial-tab  Make tabs line up by prepending a tab.
  --tabsize=NUM  Tab stops are every NUM (default 8) print columns.
  --suppress-blank-empty  Suppress space or tab before empty output lines.

  -r  --recursive  Recursively compare any subdirectories found.
  -N  --new-file  Treat absent files as empty.
  --unidirectional-new-file  Treat absent first files as empty.
  -s  --report-identical-files  Report when two files are the same.
  -x PAT  --exclude=PAT  Exclude files that match PAT.
  -X FILE  --exclude-from=FILE  Exclude files that match any pattern in FILE.
  -S FILE  --starting-file=FILE  Start with FILE when comparing directories.
  --from-file=FILE1  Compare FILE1 to all operands.  FILE1 can be a directory.
  --to-file=FILE2  Compare all operands to FILE2.  FILE2 can be a directory.

  --horizon-lines=NUM  Keep NUM lines of the common prefix and suffix.
  -d  --minimal  Try hard to find a smaller set of changes.
  --speed-large-files  Assume large files and many scattered small changes.

  -v  --version  Output version info.
  --help  Output this help.

FILES are 'FILE1 FILE2' or 'DIR1 DIR2' or 'DIR FILE...' or 'FILE... DIR'.
If --from-file or --to-file is given, there are no restrictions on FILES.
If a FILE is '-', read standard input.
Exit status is 0 if inputs are the same, 1 if different, 2 if trouble.

Report bugs to: bug-diffutils@gnu.org
GNU diffutils home page: <http://www.gnu.org/software/diffutils/>
General help using GNU software: <http://www.gnu.org/gethelp/>
[classpha@lnxsrv05 ~/CS35L/Assign8/diffutils]$ ./src/diff . -
./src/diff: cannot compare '-' to a directory

